version: '2.1'

services:
  #  configserver:
  #    build: ConfigServer
  #    mem_limit: 512m
  #    ports:
  #      - "8888:8888"
  #    environment:
  #      - SPRING_PROFILES_ACTIVE=docker
  #    networks:
  #      backend:
  #        aliases:
  #          - "configserver"

  eurekaserver:
    build: discovery
    mem_limit: 512m
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    #    depends_on:
    #      configserver:
    #        condition: service_started
    networks:
      backend:
        aliases:
          - "eurekaserver"

  customer:
    build: customer
    mem_limit: 512m
    ports:
      - "8081:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      customer-db:
        condition: service_healthy
      #      configserver:
      #        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "customer"

  account:
    build: account
    mem_limit: 512m
    ports:
      - "8082:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      account-db:
        condition: service_healthy
      #      configserver:
      #        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "account"
  card:
    build: card
    mem_limit: 512m
    ports:
      - "8083:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      card-db:
        condition: service_healthy
      #      configserver:
      #        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "card"
  composite:
    build: composite
    mem_limit: 512m
    ports:
      - "8084:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "composite"

  gateway:
    build: gateway
    mem_limit: 512m
    ports:
      - "8085:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      #      configserver:
      #        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gateway"

  customer-db:
    image: mysql:5.7.32
    mem_limit: 512m
    ports:
      - "3307:3306"
    expose:
      # Opens port 3306 on the container
      - '3306'
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=customer-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 2s
      retries: 60
    networks:
      backend:
        aliases:
          - "customer-db"

  account-db:
    image: mysql:5.7.32
    mem_limit: 512m
    ports:
      - "3308:3306"
    expose:
      # Opens port 3306 on the container
      - '3306'
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=account-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 2s
      retries: 60
    networks:
      backend:
        aliases:
          - "account-db"

  card-db:
    image: mysql:5.7.32
    mem_limit: 512m
    ports:
      - "3309:3306"
    expose:
      # Opens port 3306 on the container
      - '3306'
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=card-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 5s
      timeout: 2s
      retries: 60
    networks:
      backend:
        aliases:
          - "card-db"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"
  logstash:
    image: docker.elastic.co/logstash/logstash:7.7.0
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5000:5000"
    networks:
      backend:
        aliases:
          - "logstash"

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    depends_on:
      - elasticsearch
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"

volumes:
  esdata1:
    driver: local

networks:
  backend:
    name: concept-banking
    driver: bridge